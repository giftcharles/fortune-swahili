name: Build and publish apt repo

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Rebuild data and package
      working-directory: scraper
      run: |
        echo "PWD=$(pwd)"
        echo "Listing current directory:"
        ls -la
        echo "Listing parent (repo root):"
        ls -la ..
        echo "Listing ../data:"
        ls -la ../data | head -20 || echo "No ../data"
        chmod +x build_deb.sh make_apt_repo.sh sign_release.sh || true
        echo "Running build_deb.sh..."
        ./build_deb.sh "$(pwd)/../data" || { echo "build_deb.sh failed with exit code $?"; exit 1; }
        # ensure .deb exists
        echo ".deb file:"
        ls -l fortune-swahili_0.1_all.deb || { echo "ERROR: .deb not found"; exit 1; }

    - name: Create apt repo
      working-directory: scraper
      run: |
        ./make_apt_repo.sh ./fortune-swahili_0.1_all.deb ./apt-repo
        # Copy public key to repo root for easy access
        cp public.key.asc ./apt-repo/
        # Copy README and INSTALL for landing page
        cp ../README.md ./apt-repo/README.md || true
        cp ../INSTALL.md ./apt-repo/INSTALL.md || true
        # Render a minimal HTML landing page for GitHub Pages
        cat > ./apt-repo/index.html <<'HTML'
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>fortune-swahili — APT repository</title>
  <style>body{font-family:system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif;max-width:900px;margin:2rem auto;padding:0 1rem;color:#111}header{border-bottom:1px solid #eee;padding-bottom:1rem;margin-bottom:1rem}pre{background:#f7f7f8;padding:1rem;border-radius:6px;overflow:auto}a{color:#0366d6}</style>
</head>
<body>
  <header>
    <h1>fortune-swahili</h1>
    <p>APT repository hosting the <strong>fortune-swahili</strong> package — a small Debian package of Swahili proverbs (5,698 items).</p>
    <p><strong>GPG-signed</strong> repository. Key ID: <code>6C365AAADEC5D261</code></p>
  </header>
  <section>
    <h2>Install</h2>
    <pre>curl -fsSL https://giftcharles.github.io/fortune-swahili/public.key.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/fortune-swahili.gpg

echo "deb [signed-by=/etc/apt/trusted.gpg.d/fortune-swahili.gpg] https://giftcharles.github.io/fortune-swahili stable main" | sudo tee /etc/apt/sources.list.d/fortune-swahili.list

sudo apt update
sudo apt install fortune-swahili</pre>
  </section>
  <section>
    <h2>Files</h2>
    <ul>
      <li><a href="/fortune-swahili/dists/stable/Release">dists/stable/Release</a></li>
      <li><a href="/fortune-swahili/dists/stable/Release.gpg">dists/stable/Release.gpg</a></li>
      <li><a href="/fortune-swahili/dists/stable/InRelease">dists/stable/InRelease</a></li>
      <li><a href="/fortune-swahili/dists/stable/main/binary-all/Packages">Packages</a></li>
      <li><a href="/fortune-swahili/pool/main/f/fortune-swahili/fortune-swahili_0.1_all.deb">.deb package</a></li>
    </ul>
  </section>
  <footer>
    <p>Repository generated and published automatically via GitHub Actions.</p>
  </footer>
</body>
</html>
HTML

    - name: Import GPG key (from secret) and sign Release
      continue-on-error: true
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        set +e  # don't exit on error, we want to see all diagnostic output
        if [ -z "$GPG_PRIVATE_KEY" ]; then
          echo "::warning::No GPG_PRIVATE_KEY secret provided; skipping signing"
          exit 0
        fi
        # import key into an isolated GNUPGHOME so we don't touch runner keyring
        export GNUPGHOME="$(pwd)/.gnupg-temp"
        rm -rf "$GNUPGHOME"
        mkdir -m700 -p "$GNUPGHOME"
        echo "GNUPGHOME=$GNUPGHOME"
        echo "Importing private key into isolated GNUPGHOME..."
        echo "$GPG_PRIVATE_KEY" | gpg --batch --homedir "$GNUPGHOME" --import 2>&1 | head -20
        IMPORT_STATUS=$?
        echo "GPG import exit code: $IMPORT_STATUS"
        echo "gpg version:" && gpg --version | head -3
        echo "Listing secret keys (homedir):"
        gpg --homedir "$GNUPGHOME" --list-secret-keys --keyid-format LONG 2>&1 || echo "No secret keys found"
        echo "Contents of GNUPGHOME:"
        ls -la "$GNUPGHOME" 2>&1 || true
        # enable loopback pinentry by setting gpg options when invoking sign script
        cd scraper
        echo "Running sign_release.sh for dists/stable/Release..."
        if ./sign_release.sh ./apt-repo/dists/stable/Release "$GPG_PASSPHRASE" 2>&1 | tee sign-output.log; then
          echo "::notice::Sign succeeded"
        else
          echo "::warning::Sign failed, publishing unsigned repo. See sign-output.log below:"
          cat sign-output.log 2>&1 || true
        fi
        echo "Final apt-repo contents:"
        ls -lR ./apt-repo 2>&1 || true
        # clean up GNUPGHOME
        rm -rf "$GNUPGHOME" 2>&1 || true

    - name: Publish to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./scraper/apt-repo

