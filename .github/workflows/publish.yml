name: Build and publish apt repo

on:
  push:
    branches: [ main ]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Rebuild data and package
      working-directory: scraper
      run: |
        chmod +x build_deb.sh make_apt_repo.sh sign_release.sh || true
        ./build_deb.sh "$(pwd)/../data" || true
        # ensure .deb exists
        ls -l fortune-swahili_0.1_all.deb || true

    - name: Create apt repo
      working-directory: scraper
      run: |
        ./make_apt_repo.sh ./fortune-swahili_0.1_all.deb ./apt-repo

    - name: Import GPG key (from secret) and sign Release
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      run: |
        set -euo pipefail
        if [ -z "$GPG_PRIVATE_KEY" ]; then
          echo "No GPG key provided; failing"; exit 1
        fi
        # import key into an isolated GNUPGHOME so we don't touch runner keyring
        export GNUPGHOME="$(pwd)/.gnupg-temp"
        rm -rf "$GNUPGHOME"
        mkdir -m700 -p "$GNUPGHOME"
        echo "GNUPGHOME=$GNUPGHOME"
        echo "Importing private key into isolated GNUPGHOME..."
        echo "$GPG_PRIVATE_KEY" | gpg --batch --homedir "$GNUPGHOME" --import || true
        echo "gpg version:" && gpg --version
        echo "Listing secret keys (homedir):" && gpg --homedir "$GNUPGHOME" --list-secret-keys --keyid-format LONG || true
        echo "Listing secret keys (colon):" && gpg --homedir "$GNUPGHOME" --with-colons --list-secret-keys || true
        echo "Contents of GNUPGHOME:" && ls -la "$GNUPGHOME" || true
        # enable loopback pinentry by setting gpg options when invoking sign script
        cd scraper
        echo "Running sign_release.sh (capture output)..."
        if ./sign_release.sh ./apt-repo/Release "$GPG_PASSPHRASE" 2>&1 | tee sign-output.log; then
          echo "Sign succeeded"
        else
          echo "Sign failed, see sign-output.log"; ls -l ./apt-repo || true; cat sign-output.log || true; exit 5
        fi
        echo "Signed files in apt-repo:" && ls -l ./apt-repo || true
        # clean up GNUPGHOME
        rm -rf "$GNUPGHOME"

    - name: Publish to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./scraper/apt-repo
        destination_dir: /

